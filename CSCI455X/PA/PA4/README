Name: 
USC NetID: 
CS 455 PA4
Spring 2023

----------------------------------------------
CERTIFY IT'S YOUR WORK

"I certify that the work submitted for this assignment does not
violate USC's student conduct code.  In particular, the work is my
own, not a collaboration, and does not involve code created by other
people, except for the the resources explicitly mentioned in the CS 455
Course Syllabus.  And I did not share my solution or parts of it with
other students in the course."

Initial below to "sign" the above statement:

CL
----------------------------------------------
ACKNOWLEDGE ANY OUTSIDE SOURCES

List here any code you submitted for this assignment that was written
with significant help of a course staff member, or code used from the
textbook.  Be specific about what methods or algorithms are involved,
and what sections of the textbook are involved (if applicable): [you do
not need to list any of the code that we wrote for the assignment,
i.e., the contents of the starter files for the assignment]



----------------------------------------------
KNOWN BUGS or LIMITATIONS:



----------------------------------------------
DESCRIPTION OF YOUR CLASS DESIGN AND ALGORITHMS AND DATA STRUCTURES USED:

In AnagramDictionary, I preprocessed the dictionary so that I organized the words by the set of letters each one contains. The data in the dictionary is stored in a HashMap, using sorted and normalized word String as the key and an ArrayList containing the corresponding words which have the same sorted and normalized word String as the value.

In Rack, for each rack I generated all the subsets of that multiset of letters, and for each subset add all the words from the dictionary that have exactly the same elements as that subset. The input is stored as a String word. I use function output to obtain and print all the anagrams. It uses allSubsets to obtain the subsets first and then use sort to obtain the sortedSubset. Then it uses getAnagramsOf to obtain anagrams from dictionary. Finally, it uses new comparator to sort the anagrams in score and alphabetical order and print them.

In ScoreTable, I implements the SCORES to store the score information of letters and function sumScore to return the score of an input word by counting the score of letters of the input word one by one.

In WordFinder, I implementsed the main function, which deals with the "file does not exist" problem and "ERROR: Illegal dictionary: dictionary file has a duplicate word" problem. And main function calls Rack and output to deal with the input and generate the result.


----------------------------------------------
ANY OTHER NOTES FOR THE GRADER:







